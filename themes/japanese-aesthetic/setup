#!/usr/bin/env nu

let themes = $env.CONFIG_PATH | path join "themes" | path expand
let theme = $themes | path join "japanese-aesthetic"
let config = open ($theme | path join "config.toml")

let colors = open ($theme | path join "style.toml") | get $config.variant
let style = open ($theme | path join "style.toml") | get style
let metadata = open ($theme | path join "metadata.toml")
let fonts = $metadata | get fonts
let background_h_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" h
let background_w_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" w
let background_v_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" v
let background_h_greet_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" h greet

let color_keys = $colors | columns
let style_keys = $style | columns
let keys = $color_keys ++ $style_keys
let color_values = $colors | values
let style_values = $style | values
let values = $color_values ++ $style_values
let kvps = $keys | zip $values
let color_kvps = $color_keys | zip $color_values
let style_kvps = $style_keys | zip $style_values

let font_keys = $fonts | columns
let font_values = $fonts | values
let font_kvps = $font_keys | zip $font_values

# setup eww

let scss = $kvps | each { |it| 
    let key = $it | get 0
    let value = $it | get 1
    $"$($key): ($value);"
} | to text

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/styles.scss")
$scss | save -f $path

let chezmoi_eww_path = ($env.CHEZMOI_PATH | path join "eww")
hook --force --relative --source $path --destination ($chezmoi_eww_path | path join "styles.scss")
let eww_icons_src = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/eww/icons")
let eww_icons_dest = ($env.CHEZMOI_PATH | path join "eww/icons")
hook --force --relative --source $eww_icons_src --destination $eww_icons_dest

# setup colors for browser

let css = ":root {" | append ($kvps | each { |it| 
    let key = $it | get 0
    let value = $it | get 1
    $"  --($key): ($value);"
})
| append "}"

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/styles.css")
$css | to text | save -f $path

let chezmoi_browser_path = ($env.CHEZMOI_PATH | path join "zen-browser/chrome")
hook --force --relative --source $path --destination ($chezmoi_browser_path | path join "styles.css")

# setup variables for hyprland

let conf = $kvps | each { |it| 
    let key = $it | get 0 | str replace --all "-" "_"
    let value = $it | get 1
    $"$($key) = ($value | str replace "#" "")"
} 
| append $"$background_h = ($background_h_path)"
| append $"$background_w = ($background_w_path)"
| append $"$background_v = ($background_v_path)"
| append $"$background_h_greet = ($background_h_greet_path)"
| append $"$cursor_theme = japanese-aesthetic"

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/variables.conf")
$conf | to text | save -f $path

let chezmoi_hypr_path = ($env.CHEZMOI_PATH | path join "hypr")
hook --force --relative --source $path --destination ($chezmoi_hypr_path | path join "variables.conf")

# setup variables for hyprlock

let colors_lock = open ($theme | path join "style.toml") | get $config.lock_variant

let keys_lock = $colors_lock | columns | append $style_keys
let values_lock = $colors_lock | values | append $style_values
let kvps_lock = $keys_lock | zip $values_lock

let lock_background_h_greet_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" --config-option lock_variant h greet
let lock_background_w_greet_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" --config-option lock_variant w greet
let lock_background_h_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" --config-option lock_variant h
let lock_background_w_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" --config-option lock_variant w
let lock_background_v_path = nu $"($env.CONFIG_PATH)/hypr/scripts/get-wallpaper" --config-option lock_variant v

let conf = $kvps_lock | each { |it| 
    let key = $it | get 0 | str replace --all "-" "_"
    let value = $it | get 1
    $"$($key) = ($value | str replace "#" "")"
} 
| append ($font_kvps | each { |it|
    let key = $it | get 0
    let value = $it | get 1
    $"$font_($key | str replace -a "-" "_") = ($value)"
})
| append $"$background_h_greet = ($lock_background_h_greet_path)"
| append $"$background_w_greet = ($lock_background_w_greet_path)"
| append $"$background_h = ($lock_background_h_path)"
| append $"$background_w = ($lock_background_w_path)"
| append $"$background_v = ($lock_background_v_path)"

let path = ($env.CHEZMOI_PATH | path join
    "themes/japanese-aesthetic/variables_lock.conf")
$conf | to text | save -f $path

let chezmoi_hypr_path = ($env.CHEZMOI_PATH | path join "hypr")
hook --force --relative --source $path --destination ($chezmoi_hypr_path | path join "variables_lock.conf")

# setup rofi

let rofi = "* {" | append ($kvps | each { |it| 
    let key = $it | get 0
    mut value = $it | get 1

    if ($key | str contains "border") {
        $value = $"($value)px"
    }

    $"\t($key): ($value);"
}
| append ($font_kvps | each { |it|
    let key = $it | get 0
    let value = $it | get 1
    $"\tfont-($key): \"($value) 10\";"
})
| append "}") 
| to text

let rofi_root = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/rofi")
let rofi_config_path = $rofi_root | path join "config.rasi"
let rofi_variables_path = $rofi_root | path join "variables.rasi"
$rofi | to text | save -f $rofi_variables_path

let chezmoi_rofi_path = ($env.CHEZMOI_PATH | path join "rofi")
hook --force --relative --source $rofi_variables_path --destination ($chezmoi_rofi_path | path join "variables.rasi")
hook --force --relative --source $rofi_config_path --destination ($chezmoi_rofi_path | path join "config.rasi")

# setup lua colors and colorbuddy

let lua = "return {" | append ($kvps | each { |it| 
    let key = $it | get 0 | str replace --all "-" "_"
    let value = $it | get 1
    $"\t($key) = \"($value)\","
}) | append "}" | to text

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/colors.lua")
$lua | to text | save -f $path

let chezmoi_lua_path = ($env.CHEZMOI_PATH | path join "nvim/lua/skypex")
hook --force --relative --source $path --destination ($chezmoi_lua_path | path join "colors.lua")

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/colorbuddy.lua")

let chezmoi_lua_path = ($env.CHEZMOI_PATH | path join "nvim/lua/skypex")
hook --force --relative --source $path --destination ($chezmoi_lua_path | path join "colorbuddy.lua")

# setup wezterm colors
let lua = "return {" | append ($kvps | each { |it| 
    let key = $it | get 0 | str replace --all "-" "_"
    let value = $it | get 1
    $"\t($key) = \"($value)\","
}) | append "}" | to text

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/colors.lua")
$lua | to text | save -f $path

let chezmoi_wezterm_path = ($env.CHEZMOI_PATH | path join "wezterm")
hook --force --relative --source $path --destination ($chezmoi_wezterm_path | path join "colors.lua")

# setup nushell colors

let nushell = "let colors = {" | append ($kvps | each { |it| 
    let key = $it | get 0
    let value = $it | get 1
    $"\t($key): \"($value)\""
}) | append "}" | to text

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/colors.nu")
$nushell | to text | save -f $path

let chezmoi_lua_path = ($env.CHEZMOI_PATH | path join "nushell")
hook --force --relative --source $path --destination ($chezmoi_lua_path | path join "colors.nu")


# setup starship
# this ones annoying, i have to generate the entire file with the colors i want

let starship = [
    `# Get editor completions based on the config schema`,
    `"$schema" = 'https://starship.rs/config-schema.json'`,
    ``,
    `# Config`,
    `command_timeout = 3000`,
    ``,
    `# Disable the blank line at the start of the prompt`,
    `add_newline = false`,
    ``,
    `format = """`,
    `$character\`,
    `$os\`,
    `$directory\`,
    `$git_branch\`,
    `$git_status\`,
    `[ ](prev_bg)`,
    `"""`,
    ``,
    `# An alternative to the username module which displays a symbol that`,
    `# represents the current operating system`,
    `[os]`,
    ([`style = "fg:`, $colors.background1, ` bg:prev_fg"`] | str join ""),
    `format = "[$symbol]($style)"`,
    `disabled = false                # Disabled by default`,
    ``,
    `[os.symbols]`,
    `Arch = "󰣇 "`,
    `EndeavourOS = " "`,
    `Linux = " "`,
    `NixOS = " "`,
    `Ubuntu = " "`,
    `Windows = " "`,
    ``,
    `[directory]`,
    ([`style = "fg:`, $colors.background1, ` bg:prev_bg"`] | str join ""),
    `format = "[ $path]($style)"`,
    ``,
    `# Here is how you can shorten some long paths by text replacement`,
    `# similar to mapped_locations in Oh My Posh:`,
    `[directory.substitutions]`,
    `"Contacts" = " "`,
    `"Kontakter" = " "`,
    `"Desktop" = " "`,
    `"Skrivebord" = " "`,
    `"Documents" = "󰈙 "`,
    `"Dokumenter" = "󰈙 "`,
    `"Downloads" = " "`,
    `"Nedlastinger" = " "`,
    `"Movies" = " "`,
    `"Filmer" = " "`,
    `"Music" = " "`,
    `"Musikk" = " "`,
    `"OneDrive" = " "`,
    `"Pictures" = " "`,
    `"Bilder" = " "`,
    `# Keep in mind that the order matters. For example:`,
    `# "Important Documents" = " 󰈙 "`,
    `# will not be replaced, because "Documents" was already substituted before.`,
    `# So either put "Important Documents" before "Documents" or use the substituted version:`,
    `# "Important 󰈙 " = " 󰈙 "`,
    ``,
    `# VCS Branch`,
    `[git_branch]`,
    `symbol = " "`,
    ([`style = "fg:`, $colors.background1, ` bg:prev_bg"`] | str join ""),
    `format = '[ $symbol$branch]($style)'`,
    ``,
    `[git_state]`,
    `rebase = " "`,
    `merge = " "`,
    `revert = "󰕍 "`,
    `cherry_pick = " "`,
    `bisect = "󰕝 "`,
    `am = "󰛮 "`,
    `am_or_rebase = "󰛮 / "`,
    ([`style = "fg:`, $colors.background1, ` bg:prev_bg"`] | str join ""),
    `format = ' \([$state($progress_current/$progress_total)]($style)\)'`,
    ``,
    `[git_status]`,
    `disabled = false`,
    ([`style = "fg:`, $colors.background1, ` bg:prev_bg"`] | str join ""),
    `format = '[ $all_status$ahead_behind]($style)'`,
    ``,
    `[character]`,
    ([`success_symbol = "[](fg:`, $colors.primary, `)"`] | str join ""),
    ([`error_symbol = "[](`, $colors.error, `)"`] | str join ""),
    ([`vimcmd_symbol = "[](`, $colors.background1 `)"`] | str join ""),
    `format = "$symbol"`
]

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/starship.toml")
$starship | str join "\n" | to text | save -f $path

let chezmoi_starship_path = $env.CHEZMOI_PATH
hook --force --relative --source $path --destination ($chezmoi_starship_path | path join "starship.toml")

# setup mako

let output = if (sys host).hostname == "brage-work-laptop" {
    "DP-7"
} else {
    "DP-2"
}

let mako = [
    `# Style`,
    ([`font=`, $metadata.fonts.primary-style] | str join ""),
    ``,
    ([`background-color=`, $colors.background1] | str join ""),
    ([`text-color=`, $colors.primary] | str join ""),
    ([`border-color=`, $colors.secondary] | str join ""),
    ([`progress-color=over `, $colors.background2] | str join ""),
    ([`output=`, $output] | str join ""),
    ``,
    ([`border-radius=`, $style.border-outer-radius] | str join ""),
    ([`border-size=`, $style.border-size] | str join ""),
    ``,
    `[urgency=high]`,
    ([`border-color=`, $colors.orange] | str join ""),
    ``,
    `[app-name=Spotify]`,
    `invisible=1`
]

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/mako-config")
$mako | str join "\n" | to text | save -f $path

let chezmoi_mako_path = $env.CHEZMOI_PATH | path join "mako"
hook --force --relative --source $path --destination ($chezmoi_mako_path | path join "config")
let cursor_theme_path = ($theme | path join "cursor/rose-pine-hyprcursor")

# setup quickshell

let qml = "pragma Singleton\nimport QtQuick\n\nQtObject {" 
| append (
    $color_kvps | each { |it| 
        let key = $it | get 0
        let value = $it | get 1
        $"  property color ($key | str replace -a "-" "_"): \"($value)\";"
    } | to text)
| append (
    $style_kvps | each { |it| 
        let key = $it | get 0
        let value = $it | get 1
        $"  property string ($key | str replace -a "-" "_"): \"($value)\";"
    } | to text)
| append (
    $font_kvps | each { |it| 
        let key = $it | get 0
        let value = $it | get 1
        $"  property string ($key | str replace -a "-" "_"): \"($value)\";"
    } | to text)
| append "}"

let path = ($env.CHEZMOI_PATH | path join "themes/japanese-aesthetic/Theme.qml")
$qml | save -f $path

let chezmoi_quickshell_path = ($env.CHEZMOI_PATH | path join "quickshell")
hook --force --relative --source $path --destination ($chezmoi_quickshell_path | path join "Theme.qml")

mkdir ~/.local/share/icons/japanese-aesthetic
cp --recursive $cursor_theme_path ~/.local/share/icons/japanese-aesthetic

chezmoi apply --force

# tell mako to refresh its config
makoctl reload

